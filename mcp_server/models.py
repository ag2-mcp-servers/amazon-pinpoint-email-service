# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:02:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class AccountSuspendedException(RootModel[Any]):
    root: Any


class AlreadyExistsException(RootModel[Any]):
    root: Any


class AmazonResourceName(RootModel[str]):
    root: str


class BadRequestException(RootModel[Any]):
    root: Any


class BehaviorOnMxFailure(Enum):
    USE_DEFAULT_VALUE = 'USE_DEFAULT_VALUE'
    REJECT_MESSAGE = 'REJECT_MESSAGE'


class BlacklistItemName(RootModel[str]):
    root: str = Field(
        ...,
        description='An IP address that you want to obtain blacklist information for.',
    )


class BlacklistItemNames(RootModel[List[BlacklistItemName]]):
    root: List[BlacklistItemName]


class BlacklistingDescription(RootModel[str]):
    root: str = Field(..., description='A description of the blacklisting event.')


class CampaignId(RootModel[str]):
    root: str


class Charset(RootModel[str]):
    root: str


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConfigurationSetName(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The name of a configuration set.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>',
    )


class ConfigurationSetNameList(RootModel[List[ConfigurationSetName]]):
    root: List[ConfigurationSetName]


class CreateConfigurationSetEventDestinationResponse(BaseModel):
    pass


class CreateConfigurationSetResponse(BaseModel):
    pass


class CreateDedicatedIpPoolResponse(BaseModel):
    pass


class CustomRedirectDomain(RootModel[str]):
    root: str = Field(
        ...,
        description='The domain that you want to use for tracking open and click events.',
    )


class DefaultDimensionValue(RootModel[str]):
    root: str = Field(
        ...,
        description="<p>The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. This value has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>",
    )


class DeleteConfigurationSetEventDestinationRequest(BaseModel):
    pass


class DeleteConfigurationSetEventDestinationResponse(BaseModel):
    pass


class DeleteConfigurationSetRequest(BaseModel):
    pass


class DeleteConfigurationSetResponse(BaseModel):
    pass


class DeleteDedicatedIpPoolRequest(BaseModel):
    pass


class DeleteDedicatedIpPoolResponse(BaseModel):
    pass


class DeleteEmailIdentityRequest(BaseModel):
    pass


class DeleteEmailIdentityResponse(BaseModel):
    pass


class DeliverabilityDashboardAccountStatus(Enum):
    ACTIVE = 'ACTIVE'
    PENDING_EXPIRATION = 'PENDING_EXPIRATION'
    DISABLED = 'DISABLED'


class DeliverabilityTestStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'


class DeliverabilityTestSubject(RootModel[str]):
    root: str = Field(
        ...,
        description='The subject line for an email that you submitted in a predictive inbox placement test.',
    )


class DimensionName(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>',
    )


class DimensionValueSource(Enum):
    MESSAGE_TAG = 'MESSAGE_TAG'
    EMAIL_HEADER = 'EMAIL_HEADER'
    LINK_TAG = 'LINK_TAG'


class DkimStatus(Enum):
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TEMPORARY_FAILURE = 'TEMPORARY_FAILURE'
    NOT_STARTED = 'NOT_STARTED'


class DnsToken(RootModel[str]):
    root: str


class DnsTokenList(RootModel[List[DnsToken]]):
    root: List[DnsToken]


class Domain(RootModel[str]):
    root: str


class EmailAddress(RootModel[str]):
    root: str


class EmailAddressList(RootModel[List[EmailAddress]]):
    root: List[EmailAddress]


class Enabled(RootModel[bool]):
    root: bool


class Esp(RootModel[str]):
    root: str


class Esps(RootModel[List[Esp]]):
    root: List[Esp]


class EventDestinationName(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The name of an event destination.</p> <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>',
    )


class EventType(Enum):
    SEND = 'SEND'
    REJECT = 'REJECT'
    BOUNCE = 'BOUNCE'
    COMPLAINT = 'COMPLAINT'
    DELIVERY = 'DELIVERY'
    OPEN = 'OPEN'
    CLICK = 'CLICK'
    RENDERING_FAILURE = 'RENDERING_FAILURE'


class EventTypes(RootModel[List[EventType]]):
    root: List[EventType]


class GeneralEnforcementStatus(RootModel[str]):
    root: str


class GetAccountRequest(BaseModel):
    pass


class GetBlacklistReportsRequest(BaseModel):
    pass


class GetConfigurationSetEventDestinationsRequest(BaseModel):
    pass


class GetConfigurationSetRequest(BaseModel):
    pass


class GetDedicatedIpRequest(BaseModel):
    pass


class GetDedicatedIpsRequest(BaseModel):
    pass


class GetDeliverabilityDashboardOptionsRequest(BaseModel):
    pass


class GetDeliverabilityTestReportRequest(BaseModel):
    pass


class GetDomainDeliverabilityCampaignRequest(BaseModel):
    pass


class GetDomainStatisticsReportRequest(BaseModel):
    pass


class GetEmailIdentityRequest(BaseModel):
    pass


class Identity(RootModel[str]):
    root: str


class IdentityType(Enum):
    EMAIL_ADDRESS = 'EMAIL_ADDRESS'
    DOMAIN = 'DOMAIN'
    MANAGED_DOMAIN = 'MANAGED_DOMAIN'


class ImageUrl(RootModel[str]):
    root: str


class Ip(RootModel[str]):
    root: str = Field(
        ...,
        description='A dedicated IP address that is associated with your Amazon Pinpoint account.',
    )


class IpList(RootModel[List[Ip]]):
    root: List[Ip]


class IspName(RootModel[str]):
    root: str = Field(..., description='The name of an email provider.')


class IspNameList(RootModel[List[IspName]]):
    root: List[IspName]


class KinesisFirehoseDestination(BaseModel):
    DeliveryStreamArn: AmazonResourceName
    IamRoleArn: AmazonResourceName


class LastFreshStart(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.',
    )


class LimitExceededException(RootModel[Any]):
    root: Any


class ListConfigurationSetsRequest(BaseModel):
    pass


class ListDedicatedIpPoolsRequest(BaseModel):
    pass


class ListDeliverabilityTestReportsRequest(BaseModel):
    pass


class ListDomainDeliverabilityCampaignsRequest(BaseModel):
    pass


class ListEmailIdentitiesRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MailFromDomainName(RootModel[str]):
    root: str = Field(
        ..., description='The domain that you want to use as a MAIL FROM domain.'
    )


class MailFromDomainNotVerifiedException(RootModel[Any]):
    root: Any


class MailFromDomainStatus(Enum):
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TEMPORARY_FAILURE = 'TEMPORARY_FAILURE'


class Max24HourSend(RootModel[float]):
    root: float


class MaxItems(RootModel[int]):
    root: int


class MaxSendRate(RootModel[float]):
    root: float


class MessageContent(RootModel[str]):
    root: str = Field(..., description='The body of an email message.')


class MessageData(RootModel[str]):
    root: str


class MessageRejected(RootModel[Any]):
    root: Any


class MessageTagName(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The name of the message tag. The message tag name has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>',
    )


class MessageTagValue(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The value of the message tag. The message tag value has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>',
    )


class NextToken(RootModel[str]):
    root: str


class NotFoundException(RootModel[Any]):
    root: Any


class OutboundMessageId(RootModel[str]):
    root: str


class Percentage(RootModel[float]):
    root: float = Field(
        ...,
        description='An object that contains information about inbox placement percentages.',
    )


class Percentage100Wrapper(RootModel[int]):
    root: int


class PinpointDestination(BaseModel):
    ApplicationArn: Optional[AmazonResourceName] = None


class PlacementStatistics(BaseModel):
    DkimPercentage: Optional[Percentage] = None
    InboxPercentage: Optional[Percentage] = None
    MissingPercentage: Optional[Percentage] = None
    SpamPercentage: Optional[Percentage] = None
    SpfPercentage: Optional[Percentage] = None


class PoolName(RootModel[str]):
    root: str = Field(..., description='The name of a dedicated IP pool.')


class PutAccountDedicatedIpWarmupAttributesRequest(BaseModel):
    AutoWarmupEnabled: Optional[Enabled] = None


class PutAccountDedicatedIpWarmupAttributesResponse(BaseModel):
    pass


class PutAccountSendingAttributesRequest(BaseModel):
    SendingEnabled: Optional[Enabled] = None


class PutAccountSendingAttributesResponse(BaseModel):
    pass


class PutConfigurationSetDeliveryOptionsResponse(BaseModel):
    pass


class PutConfigurationSetReputationOptionsRequest(BaseModel):
    ReputationMetricsEnabled: Optional[Enabled] = None


class PutConfigurationSetReputationOptionsResponse(BaseModel):
    pass


class PutConfigurationSetSendingOptionsRequest(BaseModel):
    SendingEnabled: Optional[Enabled] = None


class PutConfigurationSetSendingOptionsResponse(BaseModel):
    pass


class PutConfigurationSetTrackingOptionsRequest(BaseModel):
    CustomRedirectDomain_1: Optional[CustomRedirectDomain] = Field(
        None, alias='CustomRedirectDomain'
    )


class PutConfigurationSetTrackingOptionsResponse(BaseModel):
    pass


class PutDedicatedIpInPoolRequest(BaseModel):
    DestinationPoolName: PoolName


class PutDedicatedIpInPoolResponse(BaseModel):
    pass


class PutDedicatedIpWarmupAttributesRequest(BaseModel):
    WarmupPercentage: Percentage100Wrapper


class PutDedicatedIpWarmupAttributesResponse(BaseModel):
    pass


class PutDeliverabilityDashboardOptionResponse(BaseModel):
    pass


class PutEmailIdentityDkimAttributesRequest(BaseModel):
    SigningEnabled: Optional[Enabled] = None


class PutEmailIdentityDkimAttributesResponse(BaseModel):
    pass


class PutEmailIdentityFeedbackAttributesRequest(BaseModel):
    EmailForwardingEnabled: Optional[Enabled] = None


class PutEmailIdentityFeedbackAttributesResponse(BaseModel):
    pass


class PutEmailIdentityMailFromAttributesRequest(BaseModel):
    BehaviorOnMxFailure_1: Optional[BehaviorOnMxFailure] = Field(
        None, alias='BehaviorOnMxFailure'
    )
    MailFromDomain: Optional[MailFromDomainName] = None


class PutEmailIdentityMailFromAttributesResponse(BaseModel):
    pass


class RawMessageData(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The raw email message. The message has to meet the following criteria:</p> <ul> <li> <p>The message has to contain a header and a body, separated by one blank line.</p> </li> <li> <p>All of the required header fields must be present in the message.</p> </li> <li> <p>Each part of a multipart MIME message must be formatted properly.</p> </li> <li> <p>Attachments must be in a file format that Amazon Pinpoint supports. </p> </li> <li> <p>The entire message must be Base64 encoded.</p> </li> <li> <p>If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients\' email clients render the message properly.</p> </li> <li> <p>The length of any single line of text in the message can\'t exceed 1,000 characters. This restriction is defined in <a href="https://tools.ietf.org/html/rfc5321">RFC 5321</a>.</p> </li> </ul>',
    )


class RblName(RootModel[str]):
    root: str = Field(
        ..., description='The name of a blacklist that an IP address was found on.'
    )


class ReportId(RootModel[str]):
    root: str = Field(
        ...,
        description='A unique string that identifies a Deliverability dashboard report.',
    )


class ReportName(RootModel[str]):
    root: str = Field(
        ...,
        description='A name that helps you identify a report generated by the Deliverability dashboard.',
    )


class ReputationOptions(BaseModel):
    LastFreshStart_1: Optional[LastFreshStart] = Field(None, alias='LastFreshStart')
    ReputationMetricsEnabled: Optional[Enabled] = None


class SendEmailResponse(BaseModel):
    MessageId: Optional[OutboundMessageId] = None


class SendingOptions(BaseModel):
    SendingEnabled: Optional[Enabled] = None


class SendingPausedException(RootModel[Any]):
    root: Any


class SendingPoolName(RootModel[str]):
    root: str = Field(
        ...,
        description='The name of the dedicated IP pool that you want to associate with the configuration set.',
    )


class SentLast24Hours(RootModel[float]):
    root: float


class SnsDestination(BaseModel):
    TopicArn: AmazonResourceName


class Subject(RootModel[str]):
    root: str


class TagKey(RootModel[str]):
    root: str


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[str]):
    root: str


class TemplateArn(RootModel[str]):
    root: str


class TemplateData(RootModel[constr(max_length=262144)]):
    root: constr(max_length=262144)


class Timestamp(RootModel[datetime]):
    root: datetime


class TlsPolicy(Enum):
    REQUIRE = 'REQUIRE'
    OPTIONAL = 'OPTIONAL'


class TooManyRequestsException(RootModel[Any]):
    root: Any


class TrackingOptions(BaseModel):
    CustomRedirectDomain_1: CustomRedirectDomain = Field(
        ..., alias='CustomRedirectDomain'
    )


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateConfigurationSetEventDestinationResponse(BaseModel):
    pass


class Volume(RootModel[int]):
    root: int = Field(
        ...,
        description='An object that contains information about inbox placement volume.',
    )


class VolumeStatistics(BaseModel):
    InboxRawCount: Optional[Volume] = None
    ProjectedInbox: Optional[Volume] = None
    ProjectedSpam: Optional[Volume] = None
    SpamRawCount: Optional[Volume] = None


class WarmupStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    DONE = 'DONE'


class V1EmailAccountDedicatedIpsWarmupPutRequest(BaseModel):
    AutoWarmupEnabled: Optional[bool] = Field(
        None,
        description='Enables or disables the automatic warm-up feature for dedicated IP addresses that are associated with your Amazon Pinpoint account in the current AWS Region. Set to <code>true</code> to enable the automatic warm-up feature, or set to <code>false</code> to disable it.',
    )


class V1EmailAccountSendingPutRequest(BaseModel):
    SendingEnabled: Optional[bool] = Field(
        None,
        description="<p>Enables or disables your account's ability to send email. Set to <code>true</code> to enable email sending, or set to <code>false</code> to disable email sending.</p> <note> <p>If AWS paused your account's ability to send email, you can't use this operation to resume your account's ability to send email.</p> </note>",
    )


class DeliveryOptions(BaseModel):
    SendingPoolName: Optional[PoolName] = None
    TlsPolicy_1: Optional[TlsPolicy] = Field(None, alias='TlsPolicy')


class TrackingOptions1(BaseModel):
    CustomRedirectDomain_1: Optional[CustomRedirectDomain] = Field(
        None, alias='CustomRedirectDomain'
    )


class V1EmailConfigurationSetsConfigurationSetNameDeliveryOptionsPutRequest(BaseModel):
    SendingPoolName: Optional[str] = Field(
        None,
        description='The name of the dedicated IP pool that you want to associate with the configuration set.',
    )
    TlsPolicy_1: Optional[TlsPolicy] = Field(
        None,
        alias='TlsPolicy',
        description="Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.",
    )


class V1EmailConfigurationSetsConfigurationSetNameReputationOptionsPutRequest(
    BaseModel
):
    ReputationMetricsEnabled: Optional[bool] = Field(
        None,
        description='If <code>true</code>, tracking of reputation metrics is enabled for the configuration set. If <code>false</code>, tracking of reputation metrics is disabled for the configuration set.',
    )


class V1EmailConfigurationSetsConfigurationSetNameSendingPutRequest(BaseModel):
    SendingEnabled: Optional[bool] = Field(
        None,
        description='If <code>true</code>, email sending is enabled for the configuration set. If <code>false</code>, email sending is disabled for the configuration set.',
    )


class V1EmailConfigurationSetsConfigurationSetNameTrackingOptionsPutRequest(BaseModel):
    CustomRedirectDomain: Optional[str] = Field(
        None,
        description='The domain that you want to use for tracking open and click events.',
    )


class V1EmailDedicatedIpsIPPoolPutRequest(BaseModel):
    DestinationPoolName: str = Field(
        ..., description='The name of a dedicated IP pool.'
    )


class V1EmailDedicatedIpsIPWarmupPutRequest(BaseModel):
    WarmupPercentage: int = Field(
        ...,
        description='The warm-up percentage that you want to associate with the dedicated IP address.',
    )


class V1EmailIdentitiesEmailIdentityDkimPutRequest(BaseModel):
    SigningEnabled: Optional[bool] = Field(
        None,
        description="<p>Sets the DKIM signing configuration for the identity.</p> <p>When you set this value <code>true</code>, then the messages that Amazon Pinpoint sends from the identity are DKIM-signed. When you set this value to <code>false</code>, then the messages that Amazon Pinpoint sends from the identity aren't DKIM-signed.</p>",
    )


class V1EmailIdentitiesEmailIdentityFeedbackPutRequest(BaseModel):
    EmailForwardingEnabled: Optional[bool] = Field(
        None,
        description="<p>Sets the feedback forwarding configuration for the identity.</p> <p>If the value is <code>true</code>, Amazon Pinpoint sends you email notifications when bounce or complaint events occur. Amazon Pinpoint sends this notification to the address that you specified in the Return-Path header of the original email.</p> <p>When you set this value to <code>false</code>, Amazon Pinpoint sends notifications through other mechanisms, such as by notifying an Amazon SNS topic or another event destination. You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications, Amazon Pinpoint sends an email notification when these events occur (even if this setting is disabled).</p>",
    )


class V1EmailIdentitiesEmailIdentityMailFromPutRequest(BaseModel):
    BehaviorOnMxFailure_1: Optional[BehaviorOnMxFailure] = Field(
        None,
        alias='BehaviorOnMxFailure',
        description="<p>The action that you want Amazon Pinpoint to take if it can't read the required MX record for a custom MAIL FROM domain. When you set this value to <code>UseDefaultValue</code>, Amazon Pinpoint uses <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, Amazon Pinpoint returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>",
    )
    MailFromDomain: Optional[str] = Field(
        None, description='The domain that you want to use as a MAIL FROM domain.'
    )


class Destination(BaseModel):
    BccAddresses: Optional[EmailAddressList] = None
    CcAddresses: Optional[EmailAddressList] = None
    ToAddresses: Optional[EmailAddressList] = None


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class BlacklistEntry(BaseModel):
    Description: Optional[BlacklistingDescription] = None
    ListingTime: Optional[Timestamp] = None
    RblName_1: Optional[RblName] = Field(None, alias='RblName')


class CloudWatchDimensionConfiguration(BaseModel):
    DefaultDimensionValue_1: DefaultDimensionValue = Field(
        ..., alias='DefaultDimensionValue'
    )
    DimensionName_1: DimensionName = Field(..., alias='DimensionName')
    DimensionValueSource_1: DimensionValueSource = Field(
        ..., alias='DimensionValueSource'
    )


class CloudWatchDimensionConfigurations(
    RootModel[List[CloudWatchDimensionConfiguration]]
):
    root: List[CloudWatchDimensionConfiguration]


class Content(BaseModel):
    Charset_1: Optional[Charset] = Field(None, alias='Charset')
    Data: MessageData


class CreateDeliverabilityTestReportResponse(BaseModel):
    DeliverabilityTestStatus_1: DeliverabilityTestStatus = Field(
        ..., alias='DeliverabilityTestStatus'
    )
    ReportId_1: ReportId = Field(..., alias='ReportId')


class DedicatedIp(BaseModel):
    Ip_1: Ip = Field(..., alias='Ip')
    PoolName_1: Optional[PoolName] = Field(None, alias='PoolName')
    WarmupPercentage: Percentage100Wrapper
    WarmupStatus_1: WarmupStatus = Field(..., alias='WarmupStatus')


class DedicatedIpList(RootModel[List[DedicatedIp]]):
    root: List[DedicatedIp] = Field(
        ...,
        description='A list of dedicated IP addresses that are associated with your Amazon Pinpoint account.',
    )


class DeliverabilityTestReport(BaseModel):
    CreateDate: Optional[Timestamp] = None
    DeliverabilityTestStatus_1: Optional[DeliverabilityTestStatus] = Field(
        None, alias='DeliverabilityTestStatus'
    )
    FromEmailAddress: Optional[EmailAddress] = None
    ReportId_1: Optional[ReportId] = Field(None, alias='ReportId')
    ReportName_1: Optional[ReportName] = Field(None, alias='ReportName')
    Subject: Optional[DeliverabilityTestSubject] = None


class DeliverabilityTestReports(RootModel[List[DeliverabilityTestReport]]):
    root: List[DeliverabilityTestReport]


class DkimAttributes(BaseModel):
    SigningEnabled: Optional[Enabled] = None
    Status: Optional[DkimStatus] = None
    Tokens: Optional[DnsTokenList] = None


class DomainDeliverabilityCampaign(BaseModel):
    CampaignId_1: Optional[CampaignId] = Field(None, alias='CampaignId')
    DeleteRate: Optional[Percentage] = None
    Esps_1: Optional[Esps] = Field(None, alias='Esps')
    FirstSeenDateTime: Optional[Timestamp] = None
    FromAddress: Optional[Identity] = None
    ImageUrl_1: Optional[ImageUrl] = Field(None, alias='ImageUrl')
    InboxCount: Optional[Volume] = None
    LastSeenDateTime: Optional[Timestamp] = None
    ProjectedVolume: Optional[Volume] = None
    ReadDeleteRate: Optional[Percentage] = None
    ReadRate: Optional[Percentage] = None
    SendingIps: Optional[IpList] = None
    SpamCount: Optional[Volume] = None
    Subject_1: Optional[Subject] = Field(None, alias='Subject')


class DomainDeliverabilityCampaignList(RootModel[List[DomainDeliverabilityCampaign]]):
    root: List[DomainDeliverabilityCampaign] = Field(..., description='<p/>')


class DomainIspPlacement(BaseModel):
    InboxPercentage: Optional[Percentage] = None
    InboxRawCount: Optional[Volume] = None
    IspName_1: Optional[IspName] = Field(None, alias='IspName')
    SpamPercentage: Optional[Percentage] = None
    SpamRawCount: Optional[Volume] = None


class DomainIspPlacements(RootModel[List[DomainIspPlacement]]):
    root: List[DomainIspPlacement]


class GetDedicatedIpResponse(BaseModel):
    DedicatedIp_1: Optional[DedicatedIp] = Field(None, alias='DedicatedIp')


class GetDedicatedIpsResponse(BaseModel):
    DedicatedIps: Optional[DedicatedIpList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetDomainDeliverabilityCampaignResponse(BaseModel):
    DomainDeliverabilityCampaign_1: DomainDeliverabilityCampaign = Field(
        ..., alias='DomainDeliverabilityCampaign'
    )


class IdentityInfo(BaseModel):
    IdentityName: Optional[Identity] = None
    IdentityType_1: Optional[IdentityType] = Field(None, alias='IdentityType')
    SendingEnabled: Optional[Enabled] = None


class IdentityInfoList(RootModel[List[IdentityInfo]]):
    root: List[IdentityInfo]


class InboxPlacementTrackingOption(BaseModel):
    Global: Optional[Enabled] = None
    TrackedIsps: Optional[IspNameList] = None


class IspPlacement(BaseModel):
    IspName_1: Optional[IspName] = Field(None, alias='IspName')
    PlacementStatistics_1: Optional[PlacementStatistics] = Field(
        None, alias='PlacementStatistics'
    )


class IspPlacements(RootModel[List[IspPlacement]]):
    root: List[IspPlacement]


class ListConfigurationSetsResponse(BaseModel):
    ConfigurationSets: Optional[ConfigurationSetNameList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDeliverabilityTestReportsResponse(BaseModel):
    DeliverabilityTestReports_1: DeliverabilityTestReports = Field(
        ..., alias='DeliverabilityTestReports'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDomainDeliverabilityCampaignsResponse(BaseModel):
    DomainDeliverabilityCampaigns: DomainDeliverabilityCampaignList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEmailIdentitiesResponse(BaseModel):
    EmailIdentities: Optional[IdentityInfoList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOfDedicatedIpPools(RootModel[List[PoolName]]):
    root: List[PoolName] = Field(
        ...,
        description='A list of dedicated IP pools that are associated with your Amazon Pinpoint account.',
    )


class MailFromAttributes(BaseModel):
    BehaviorOnMxFailure_1: BehaviorOnMxFailure = Field(..., alias='BehaviorOnMxFailure')
    MailFromDomain: MailFromDomainName
    MailFromDomainStatus_1: MailFromDomainStatus = Field(
        ..., alias='MailFromDomainStatus'
    )


class MessageTag(BaseModel):
    Name: MessageTagName
    Value: MessageTagValue


class MessageTagList(RootModel[List[MessageTag]]):
    root: List[MessageTag] = Field(..., description='A list of message tags.')


class OverallVolume(BaseModel):
    DomainIspPlacements_1: Optional[DomainIspPlacements] = Field(
        None, alias='DomainIspPlacements'
    )
    ReadRatePercent: Optional[Percentage] = None
    VolumeStatistics_1: Optional[VolumeStatistics] = Field(
        None, alias='VolumeStatistics'
    )


class PutConfigurationSetDeliveryOptionsRequest(BaseModel):
    SendingPoolName_1: Optional[SendingPoolName] = Field(None, alias='SendingPoolName')
    TlsPolicy_1: Optional[TlsPolicy] = Field(None, alias='TlsPolicy')


class RawMessage(BaseModel):
    Data: RawMessageData


class SendQuota(BaseModel):
    Max24HourSend_1: Optional[Max24HourSend] = Field(None, alias='Max24HourSend')
    MaxSendRate_1: Optional[MaxSendRate] = Field(None, alias='MaxSendRate')
    SentLast24Hours_1: Optional[SentLast24Hours] = Field(None, alias='SentLast24Hours')


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    ResourceArn: AmazonResourceName
    Tags: TagList


class Template(BaseModel):
    TemplateArn_1: Optional[TemplateArn] = Field(None, alias='TemplateArn')
    TemplateData_1: Optional[TemplateData] = Field(None, alias='TemplateData')


class V1EmailConfigurationSetsPostRequest(BaseModel):
    ConfigurationSetName: str = Field(
        ...,
        description='<p>The name of a configuration set.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>',
    )
    DeliveryOptions_1: Optional[DeliveryOptions] = Field(
        None,
        alias='DeliveryOptions',
        description='Used to associate a configuration set with a dedicated IP pool.',
    )
    ReputationOptions_1: Optional[ReputationOptions] = Field(
        None,
        alias='ReputationOptions',
        description='Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current AWS Region. ',
    )
    SendingOptions_1: Optional[SendingOptions] = Field(
        None,
        alias='SendingOptions',
        description='Used to enable or disable email sending for messages that use this configuration set in the current AWS Region.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='An array of objects that define the tags (keys and values) that you want to associate with the configuration set.',
    )
    TrackingOptions: Optional[TrackingOptions1] = Field(
        None,
        description="<p>An object that defines the tracking options for a configuration set. When you use Amazon Pinpoint to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p> <p>These images and links include references to a domain operated by AWS. You can optionally configure Amazon Pinpoint to use a domain that you operate for these images and links.</p>",
    )


class V1EmailDedicatedIpPoolsPostRequest(BaseModel):
    PoolName: str = Field(..., description='The name of a dedicated IP pool.')
    Tags: Optional[List[Tag]] = Field(
        None,
        description='An object that defines the tags (keys and values) that you want to associate with the pool.',
    )


class V1EmailIdentitiesPostRequest(BaseModel):
    EmailIdentity: str = Field(
        ..., description='The email address or domain that you want to verify.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='An array of objects that define the tags (keys and values) that you want to associate with the email identity.',
    )


class V1EmailTagsPostRequest(BaseModel):
    ResourceArn: str = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the resource that you want to add one or more tags to.',
    )
    Tags: List[Tag] = Field(
        ...,
        description='A list of the tags that you want to add to the resource. A tag consists of a required tag key (<code>Key</code>) and an associated tag value (<code>Value</code>). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.',
    )


class BlacklistEntries(RootModel[List[BlacklistEntry]]):
    root: List[BlacklistEntry]


class BlacklistReport(RootModel[Optional[Dict[str, BlacklistEntries]]]):
    root: Optional[Dict[str, BlacklistEntries]] = None


class Body(BaseModel):
    Html: Optional[Content] = None
    Text: Optional[Content] = None


class CloudWatchDestination(BaseModel):
    DimensionConfigurations: CloudWatchDimensionConfigurations


class CreateConfigurationSetRequest(BaseModel):
    ConfigurationSetName_1: ConfigurationSetName = Field(
        ..., alias='ConfigurationSetName'
    )
    DeliveryOptions_1: Optional[DeliveryOptions] = Field(None, alias='DeliveryOptions')
    ReputationOptions_1: Optional[ReputationOptions] = Field(
        None, alias='ReputationOptions'
    )
    SendingOptions_1: Optional[SendingOptions] = Field(None, alias='SendingOptions')
    Tags: Optional[TagList] = None
    TrackingOptions_1: Optional[TrackingOptions] = Field(None, alias='TrackingOptions')


class CreateDedicatedIpPoolRequest(BaseModel):
    PoolName_1: PoolName = Field(..., alias='PoolName')
    Tags: Optional[TagList] = None


class CreateEmailIdentityRequest(BaseModel):
    EmailIdentity: Identity
    Tags: Optional[TagList] = None


class CreateEmailIdentityResponse(BaseModel):
    DkimAttributes_1: Optional[DkimAttributes] = Field(None, alias='DkimAttributes')
    IdentityType_1: Optional[IdentityType] = Field(None, alias='IdentityType')
    VerifiedForSendingStatus: Optional[Enabled] = None


class DailyVolume(BaseModel):
    DomainIspPlacements_1: Optional[DomainIspPlacements] = Field(
        None, alias='DomainIspPlacements'
    )
    StartDate: Optional[Timestamp] = None
    VolumeStatistics_1: Optional[VolumeStatistics] = Field(
        None, alias='VolumeStatistics'
    )


class DailyVolumes(RootModel[List[DailyVolume]]):
    root: List[DailyVolume]


class DomainDeliverabilityTrackingOption(BaseModel):
    Domain_1: Optional[Domain] = Field(None, alias='Domain')
    InboxPlacementTrackingOption_1: Optional[InboxPlacementTrackingOption] = Field(
        None, alias='InboxPlacementTrackingOption'
    )
    SubscriptionStartDate: Optional[Timestamp] = None


class DomainDeliverabilityTrackingOptions(
    RootModel[List[DomainDeliverabilityTrackingOption]]
):
    root: List[DomainDeliverabilityTrackingOption] = Field(
        ...,
        description='An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.',
    )


class EventDestination(BaseModel):
    CloudWatchDestination_1: Optional[CloudWatchDestination] = Field(
        None, alias='CloudWatchDestination'
    )
    Enabled_1: Optional[Enabled] = Field(None, alias='Enabled')
    KinesisFirehoseDestination_1: Optional[KinesisFirehoseDestination] = Field(
        None, alias='KinesisFirehoseDestination'
    )
    MatchingEventTypes: EventTypes
    Name: EventDestinationName
    PinpointDestination_1: Optional[PinpointDestination] = Field(
        None, alias='PinpointDestination'
    )
    SnsDestination_1: Optional[SnsDestination] = Field(None, alias='SnsDestination')


class EventDestinationDefinition(BaseModel):
    CloudWatchDestination_1: Optional[CloudWatchDestination] = Field(
        None, alias='CloudWatchDestination'
    )
    Enabled_1: Optional[Enabled] = Field(None, alias='Enabled')
    KinesisFirehoseDestination_1: Optional[KinesisFirehoseDestination] = Field(
        None, alias='KinesisFirehoseDestination'
    )
    MatchingEventTypes: Optional[EventTypes] = None
    PinpointDestination_1: Optional[PinpointDestination] = Field(
        None, alias='PinpointDestination'
    )
    SnsDestination_1: Optional[SnsDestination] = Field(None, alias='SnsDestination')


class EventDestinations(RootModel[List[EventDestination]]):
    root: List[EventDestination]


class GetAccountResponse(BaseModel):
    DedicatedIpAutoWarmupEnabled: Optional[Enabled] = None
    EnforcementStatus: Optional[GeneralEnforcementStatus] = None
    ProductionAccessEnabled: Optional[Enabled] = None
    SendQuota_1: Optional[SendQuota] = Field(None, alias='SendQuota')
    SendingEnabled: Optional[Enabled] = None


class GetBlacklistReportsResponse(BaseModel):
    BlacklistReport_1: BlacklistReport = Field(..., alias='BlacklistReport')


class GetConfigurationSetEventDestinationsResponse(BaseModel):
    EventDestinations_1: Optional[EventDestinations] = Field(
        None, alias='EventDestinations'
    )


class GetConfigurationSetResponse(BaseModel):
    ConfigurationSetName_1: Optional[ConfigurationSetName] = Field(
        None, alias='ConfigurationSetName'
    )
    DeliveryOptions_1: Optional[DeliveryOptions] = Field(None, alias='DeliveryOptions')
    ReputationOptions_1: Optional[ReputationOptions] = Field(
        None, alias='ReputationOptions'
    )
    SendingOptions_1: Optional[SendingOptions] = Field(None, alias='SendingOptions')
    Tags: Optional[TagList] = None
    TrackingOptions_1: Optional[TrackingOptions] = Field(None, alias='TrackingOptions')


class GetDeliverabilityDashboardOptionsResponse(BaseModel):
    AccountStatus: Optional[DeliverabilityDashboardAccountStatus] = None
    ActiveSubscribedDomains: Optional[DomainDeliverabilityTrackingOptions] = None
    DashboardEnabled: Enabled
    PendingExpirationSubscribedDomains: Optional[
        DomainDeliverabilityTrackingOptions
    ] = None
    SubscriptionExpiryDate: Optional[Timestamp] = None


class GetDeliverabilityTestReportResponse(BaseModel):
    DeliverabilityTestReport_1: DeliverabilityTestReport = Field(
        ..., alias='DeliverabilityTestReport'
    )
    IspPlacements_1: IspPlacements = Field(..., alias='IspPlacements')
    Message: Optional[MessageContent] = None
    OverallPlacement: PlacementStatistics
    Tags: Optional[TagList] = None


class GetDomainStatisticsReportResponse(BaseModel):
    DailyVolumes_1: DailyVolumes = Field(..., alias='DailyVolumes')
    OverallVolume_1: OverallVolume = Field(..., alias='OverallVolume')


class GetEmailIdentityResponse(BaseModel):
    DkimAttributes_1: Optional[DkimAttributes] = Field(None, alias='DkimAttributes')
    FeedbackForwardingStatus: Optional[Enabled] = None
    IdentityType_1: Optional[IdentityType] = Field(None, alias='IdentityType')
    MailFromAttributes_1: Optional[MailFromAttributes] = Field(
        None, alias='MailFromAttributes'
    )
    Tags: Optional[TagList] = None
    VerifiedForSendingStatus: Optional[Enabled] = None


class ListDedicatedIpPoolsResponse(BaseModel):
    DedicatedIpPools: Optional[ListOfDedicatedIpPools] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceResponse(BaseModel):
    Tags: TagList


class Message(BaseModel):
    Body_1: Body = Field(..., alias='Body')
    Subject: Content


class PutDeliverabilityDashboardOptionRequest(BaseModel):
    DashboardEnabled: Enabled
    SubscribedDomains: Optional[DomainDeliverabilityTrackingOptions] = None


class UpdateConfigurationSetEventDestinationRequest(BaseModel):
    EventDestination: EventDestinationDefinition


class EventDestination1(BaseModel):
    CloudWatchDestination_1: Optional[CloudWatchDestination] = Field(
        None, alias='CloudWatchDestination'
    )
    Enabled_1: Optional[Enabled] = Field(None, alias='Enabled')
    KinesisFirehoseDestination_1: Optional[KinesisFirehoseDestination] = Field(
        None, alias='KinesisFirehoseDestination'
    )
    MatchingEventTypes: Optional[EventTypes] = None
    PinpointDestination_1: Optional[PinpointDestination] = Field(
        None, alias='PinpointDestination'
    )
    SnsDestination_1: Optional[SnsDestination] = Field(None, alias='SnsDestination')


class V1EmailConfigurationSetsConfigurationSetNameEventDestinationsPostRequest(
    BaseModel
):
    EventDestination: EventDestination1 = Field(
        ...,
        description='An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.',
    )
    EventDestinationName: str = Field(
        ...,
        description='<p>The name of an event destination.</p> <p>In Amazon Pinpoint, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>',
    )


class V1EmailConfigurationSetsConfigurationSetNameEventDestinationsEventDestinationNamePutRequest(
    BaseModel
):
    EventDestination: EventDestination1 = Field(
        ...,
        description='An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.',
    )


class V1EmailDeliverabilityDashboardPutRequest(BaseModel):
    DashboardEnabled: bool = Field(
        ...,
        description='Specifies whether to enable the Deliverability dashboard for your Amazon Pinpoint account. To enable the dashboard, set this value to <code>true</code>.',
    )
    SubscribedDomains: Optional[List[DomainDeliverabilityTrackingOption]] = Field(
        None,
        description='An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.',
    )


class Content1(BaseModel):
    Raw: Optional[RawMessage] = None
    Simple: Optional[Message] = None
    Template_1: Optional[Template] = Field(None, alias='Template')


class V1EmailDeliverabilityDashboardTestPostRequest(BaseModel):
    Content: Content1 = Field(
        ...,
        description='An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.',
    )
    FromEmailAddress: str = Field(
        ...,
        description='The email address that the predictive inbox placement test email was sent from.',
    )
    ReportName: Optional[str] = Field(
        None,
        description='A name that helps you identify a report generated by the Deliverability dashboard.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.',
    )


class V1EmailOutboundEmailsPostRequest(BaseModel):
    ConfigurationSetName: Optional[str] = Field(
        None,
        description='<p>The name of a configuration set.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>',
    )
    Content: Content1 = Field(
        ...,
        description='An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.',
    )
    Destination_1: Destination = Field(
        ...,
        alias='Destination',
        description='An object that describes the recipients for an email.',
    )
    EmailTags: Optional[List[MessageTag]] = Field(
        None, description='A list of message tags.'
    )
    FeedbackForwardingEmailAddress: Optional[str] = Field(
        None,
        description='The address that Amazon Pinpoint should send bounce and complaint notifications to.',
    )
    FromEmailAddress: Optional[str] = Field(
        None,
        description='The email address that you want to use as the "From" address for the email. The address that you specify has to be verified. ',
    )
    ReplyToAddresses: Optional[List[EmailAddress]] = Field(
        None,
        description='The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.',
    )


class CreateConfigurationSetEventDestinationRequest(BaseModel):
    EventDestination: EventDestinationDefinition
    EventDestinationName_1: EventDestinationName = Field(
        ..., alias='EventDestinationName'
    )


class EmailContent(BaseModel):
    Raw: Optional[RawMessage] = None
    Simple: Optional[Message] = None
    Template_1: Optional[Template] = Field(None, alias='Template')


class SendEmailRequest(BaseModel):
    ConfigurationSetName_1: Optional[ConfigurationSetName] = Field(
        None, alias='ConfigurationSetName'
    )
    Content: EmailContent
    Destination_1: Destination = Field(..., alias='Destination')
    EmailTags: Optional[MessageTagList] = None
    FeedbackForwardingEmailAddress: Optional[EmailAddress] = None
    FromEmailAddress: Optional[EmailAddress] = None
    ReplyToAddresses: Optional[EmailAddressList] = None


class CreateDeliverabilityTestReportRequest(BaseModel):
    Content: EmailContent
    FromEmailAddress: EmailAddress
    ReportName_1: Optional[ReportName] = Field(None, alias='ReportName')
    Tags: Optional[TagList] = None
